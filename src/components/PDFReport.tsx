import React, { useState } from 'react';
import { FileDown } from 'lucide-react';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { TimeBlock, PriorityTask } from '../types';

interface PDFReportProps {
  tasks: PriorityTask[];
  blocks: TimeBlock[];
}

export function PDFReport({ tasks, blocks }: PDFReportProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    try {
      const doc = new jsPDF();
      const today = new Date().toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      // Title
      doc.setFontSize(20);
      doc.text('Daily Progress Report', 20, 20);
      doc.setFontSize(12);
      doc.text(today, 20, 30);
      
      // Tasks Summary
      doc.setFontSize(16);
      doc.text('Tasks Overview', 20, 45);
      
      const priorityTasks = tasks.filter(t => t.isTopPriority);
      const secondaryTasks = tasks.filter(t => !t.isTopPriority);
      
      const taskStats = [
        ['Priority Tasks', `${priorityTasks.filter(t => t.completed).length}/${priorityTasks.length}`],
        ['Secondary Tasks', `${secondaryTasks.filter(t => t.completed).length}/${secondaryTasks.length}`],
        ['Overall Completion', `${Math.round((tasks.filter(t => t.completed).length / tasks.length) * 100)}%`]
      ];

      autoTable(doc, {
        startY: 50,
        head: [['Category', 'Completion']],
        body: taskStats,
        theme: 'striped',
        headStyles: { fillColor: [102, 103, 171] }
      });

      // Tasks Details
      doc.text('Task Details', 20, doc.lastAutoTable.finalY + 15);

      const taskDetails = tasks.map(task => [
        task.title,
        task.isTopPriority ? 'Priority' : 'Secondary',
        task.category,
        task.completed ? 'Completed' : 'Pending'
      ]);

      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 20,
        head: [['Task', 'Priority', 'Category', 'Status']],
        body: taskDetails,
        theme: 'striped',
        headStyles: { fillColor: [102, 103, 171] }
      });

      // Time Blocks
      doc.text('Time Distribution', 20, doc.lastAutoTable.finalY + 15);

      const timeBlocks = blocks.map(block => [
        block.title,
        block.category,
        `${block.startTime}`,
        `${block.duration} min`,
        block.completed ? 'Completed' : 'Pending'
      ]);

      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 20,
        head: [['Activity', 'Category', 'Start Time', 'Duration', 'Status']],
        body: timeBlocks,
        theme: 'striped',
        headStyles: { fillColor: [102, 103, 171] }
      });

      // Category Summary
      const categoryTotals: Record<string, number> = {};
      blocks.forEach(block => {
        categoryTotals[block.category] = (categoryTotals[block.category] || 0) + block.duration;
      });

      const categoryData = Object.entries(categoryTotals).map(([category, minutes]) => [
        category,
        `${Math.round(minutes / 60 * 10) / 10}h`,
        `${Math.round((minutes / blocks.reduce((acc, block) => acc + block.duration, 0)) * 100)}%`
      ]);

      doc.text('Time by Category', 20, doc.lastAutoTable.finalY + 15);

      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 20,
        head: [['Category', 'Hours', 'Percentage']],
        body: categoryData,
        theme: 'striped',
        headStyles: { fillColor: [102, 103, 171] }
      });

      // Footer
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text(
          `Generated by RuleYour.Day - Page ${i} of ${pageCount}`,
          doc.internal.pageSize.getWidth() / 2,
          doc.internal.pageSize.getHeight() - 10,
          { align: 'center' }
        );
      }

      // Save the PDF
      doc.save(`RuleYourDay_Report_${new Date().toISOString().split('T')[0]}.pdf`);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <button
      onClick={generatePDF}
      disabled={isGenerating}
      className="group relative p-2 text-gray-500 hover:text-indigo-600 dark:text-gray-400 dark:hover:text-indigo-400 transition-colors"
      title="Download Daily Report"
    >
      <FileDown className={`w-5 h-5 ${isGenerating ? 'animate-bounce' : 'group-hover:scale-110 transition-transform'}`} />
      <span className="absolute -bottom-8 left-1/2 -translate-x-1/2 whitespace-nowrap text-xs bg-gray-900 text-white px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity">
        Download Report
      </span>
    </button>
  );
}